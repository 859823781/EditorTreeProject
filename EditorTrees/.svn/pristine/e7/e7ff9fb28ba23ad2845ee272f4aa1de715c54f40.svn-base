package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_NODE (if you choose to use one), one node cannot
// belong to two different trees.

public class Node {
	public static Node NULL_NODE = new Node();
	EditTree tree;
	
	enum Code {
		SAME, LEFT, RIGHT;
		// Used in the displayer and debug string
		public String toString() {
			switch (this) {
				case LEFT:
					return "/";
				case SAME:
					return "=";
				case RIGHT:
					return "\\";
				default:
					throw new IllegalStateException();
			}
		}
	}
	
	class Container{
		boolean b;
		Node n;
		public Container(Node newNode, Boolean completed){
			this.n=newNode;
		}
		public boolean getvalue(){
			return this.b;
		}
		public Node getNode(){
			return this.n;
		}
	}
	// The fields would normally be private, but for the purposes of this class, 
	// we want to be able to test the results of the algorithms in addition to the
	// "publicly visible" effects
	
	char element;            
	Node left, right; // subtrees
	int rank;         // inorder position of this node within its own subtree.
	Code balance; 
	// Node parent;  // You may want this field.
	// Feel free to add other fields that you find useful

	// You will probably want to add several other methods
	public Node(char ch, EditTree tr) {
		this.tree = tr;
		this.element = ch;
		this.balance = Code.SAME;
		this.left = NULL_NODE;
		this.right = NULL_NODE;
	}
	public Node() {
	}
	
	public String toString(){
		if(this.equals(NULL_NODE)){
			return "";
		}
		return this.left.toString()+this.element+this.right.toString();
	}
	
	

	// For the following methods, you should fill in the details so that they work correctly
	
	public int height() {
		if(this.equals(NULL_NODE))
			return -1;
		if(this.balance.equals(Code.LEFT)){
			return 1+this.left.height();
		}else if(this.balance.equals(Code.RIGHT)){
			return 1 + this.right.height();
		}
		return 1+this.right.height();
	}

	public int size() {
		if(this.equals(NULL_NODE)){
			return 0;
		}
		return 1+this.rank+this.right.size();
	}
	
	public Node singleLeft(){
		Node parent = this;
		Node child = this.right;
		Node childleft = child.left;
		child.left=parent;
		parent.right = childleft;
		if(child.balance.equals(Code.SAME)){
			parent.balance=Code.RIGHT;
			child.balance=Code.LEFT;
		}
		else{
			parent.balance = Code.SAME;
			child.balance = Code.SAME;
		}
		child.rank = parent.rank+child.rank-1;
		return child;
	}
	 public Node singleRight(){
		 Node parent = this;
		 Node child = this.left;
		 Node childRight = child.right;
		 child.right = parent;
		 parent.left = childRight;
		 if(child.balance.equals(Code.SAME)){
			 parent.balance=Code.LEFT;
			 child.balance = Code.RIGHT;
		 }else{
			 parent.balance=Code.SAME;
			 parent.balance = Code.SAME;
		 }
		 parent.rank = parent.rank-child.rank-1;
		 return child;
	 }
	 
	 public Node doubleRight(){
		 Node parent = this;
		 Node child1 = parent.left;
		 Node child2 = child1.right;
		 Node gC1 = child2.left;
		 Node gC2 = child2.right;
		 parent.left = gC2;
		 child1.right = gC1;
		 child2.left = child1;
		 child2.right = parent;
		 if (child2.balance.equals(Code.LEFT)) {
				parent.balance = Code.RIGHT;
				child1.balance = Code.SAME;
			} else if (child2.balance.equals(Code.RIGHT)) {
				parent.balance = Code.SAME;
				child1.balance = Code.LEFT;
			} else {
				parent.balance = Code.SAME;
				child1.balance = Code.SAME;
			}
			parent.rank = parent.rank - child2.rank - child1.rank - 2;
			child2.rank = child2.rank + child1.rank + 1;
			child2.balance = Code.SAME;
		 return child2;
	 }
	 
	 public Node doubleleft(){
		 Node parent = this;
		 Node child1 = parent.right;
		 Node child2 = child1.left;
		 Node grandChild1 = child2.left;
		 Node grandChild2 = child2.right;
		 parent.right = grandChild1;
		 child1.left = grandChild2;
		 child2.right=parent;
		 child2.left=child1;
		 if(child2.balance.equals(Code.LEFT)){
			 child1.balance = Code.RIGHT;
			 parent.balance = Code.SAME;
		 }else if(child2.balance.equals(Code.RIGHT)){
			 child1.balance = Code.SAME;
			 parent.balance = Code.LEFT;
		 }else{
			 parent.balance= Code.SAME;
			 child1.balance = Code.SAME;
		 }
		 child1.rank = child1.rank-child2.rank-1;
		 child2.rank = child2.rank+parent.rank+1;
		 child2.balance = Code.SAME;
		 return child2;
	 }

}